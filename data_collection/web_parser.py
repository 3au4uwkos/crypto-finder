from framework import get_html
from bs4 import BeautifulSoup
import pandas as pd


def parse_html_to_dataframe(html: str, source: bool) -> pd.DataFrame:
    """–ü–∞—Ä—Å–∏—Ç HTML —Ç–∞–±–ª–∏—Ü—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    soup = BeautifulSoup(html, 'html.parser')

    if source:
        table = soup.find('table', {'class': 'sc-8b138daa-1 gEBUGZ'})
        if not table:
            raise ValueError("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML")

        rows = table.find_all('tr')[1:]
        data = []

        for row in rows:
            cells = row.find_all('td')
            if len(cells) >= 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 9 –∫–æ–ª–æ–Ω–æ–∫
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                name = cells[0].get_text(strip=True)
                roi_text = cells[5].get_text(strip=True)  # 6-—è –∫–æ–ª–æ–Ω–∫–∞ (–∏–Ω–¥–µ–∫—Å 5)
                fund = cells[6].get_text(strip=True)  # 7-—è –∫–æ–ª–æ–Ω–∫–∞
                raise_text = cells[8].get_text(strip=True)[2:]  # 9-—è –∫–æ–ª–æ–Ω–∫–∞ (–∏–Ω–¥–µ–∫—Å 8)


                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏
                if any(val in ['N/A', ''] for val in [roi_text, fund, raise_text]):
                    continue


                # –û–±—Ä–∞–±–æ—Ç–∫–∞ ROI (—É–¥–∞–ª—è–µ–º 'x' –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int)
                try:
                    roi = float(roi_text.rstrip('x'))
                except ValueError:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å


                # –û–±—Ä–∞–±–æ—Ç–∫–∞ raise (K/M ‚Üí —Ç—ã—Å—è—á–∏/–º–∏–ª–ª–∏–æ–Ω—ã)
                try:
                    if 'K' in raise_text:
                        raise_val = float(raise_text.replace('K', '')) * 1000
                    elif 'M' in raise_text:
                        raise_val = float(raise_text.replace('M', '')) * 1000000
                    else:
                        raise_val = float(raise_text)
                except ValueError:
                    print(ValueError)
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

                data.append([name, roi, fund, raise_val])

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data, columns=['name', 'roi', 'fund', 'raise'])

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã
        df['roi'] = df['roi'].astype(float)
        df['raise'] = df['raise'].astype(int)

    else:
        table = soup.find('table', {'class': 'sc-8b138daa-1 gEBUGZ'})
        if not table:
            raise ValueError("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML")

        rows = table.find_all('tr')[1:]
        data = []

        for row in rows:
            cells = row.find_all('td')
            if len(cells) >= 5:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ name (cells[0])
                name = cells[0].get_text(strip=True)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ raise (cells[3])
                raise_text = cells[3].get_text(strip=True)
                if raise_text == 'N/A':
                    raise_value = None
                else:
                    raise_text = raise_text.replace('$', '').replace(' ', '')
                    if 'K' in raise_text:
                        raise_value = float(raise_text.replace('K', '')) * 1000
                    elif 'M' in raise_text:
                        raise_value = float(raise_text.replace('M', '')) * 1000000
                    else:
                        raise_value = float(raise_text) if raise_text else None

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ fund (cells[4])
                fund = cells[4].get_text(strip=True)
                fund = fund if fund else None  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Üí None

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ date (cells[5])
                date_obj = cells[5].get_text(strip=True)


                data.append([name, raise_value, fund, date_obj])

    columns = ['name', 'roi', 'fund', 'raise'] if source else ['name', 'raise', 'fund', 'date']

    return pd.DataFrame(data, columns=columns)


def get_upcoming() -> pd.DataFrame:
    """–î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""

    base_url = 'https://cryptorank.io/upcoming-ico'
    pages = [1,2]
    all_data = []

    for page in pages:
        url = f"{base_url}?rows=100&page={page}"
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")

        html = get_html(url)
        if html:
            try:
                df = parse_html_to_dataframe(html, source=False)
                all_data.append(df)
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({len(df)} –∑–∞–ø–∏—Å–µ–π)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {str(e)}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö DataFrame
    if all_data:
        merged_df = pd.concat(all_data, ignore_index=True)
        print(f"\n–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(all_data)} —Å—Ç—Ä–∞–Ω–∏—Ü, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(merged_df)}")
        return merged_df
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        return pd.DataFrame()

def get_source() -> pd.DataFrame:
    """–î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""

    base_url = 'https://cryptorank.io/ico'
    pages = list(range(1, 44))
    all_data = []

    for page in pages:
        url = f"{base_url}?rows=100&page={page}"
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")

        html = get_html(url)
        if html:
            try:
                df = parse_html_to_dataframe(html, source=True)
                all_data.append(df)
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({len(df)} –∑–∞–ø–∏—Å–µ–π)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {str(e)}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö DataFrame
    if all_data:
        merged_df = pd.concat(all_data, ignore_index=True)
        print(f"\n–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(all_data)} —Å—Ç—Ä–∞–Ω–∏—Ü, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(merged_df)}")
        return merged_df
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        return pd.DataFrame()
